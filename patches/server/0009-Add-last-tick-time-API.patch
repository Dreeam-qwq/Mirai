From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Sun, 27 Sep 2020 18:30:10 +0300
Subject: [PATCH] Add last tick time API

// TODO - uses Gale's version
Original code by YatopiaMC, licensed under MIT
You can find the original code on https://github.com/YatopiaMC/Yatopia

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 866d100de526e5995408806ac313546ce4fcdfa7..cf1fe844bb97cef2a54fe635099dc159ccc64576 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1099,6 +1099,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Spigot End
 
     public static volatile RuntimeException chunkSystemCrash; // Paper - rewrite chunk system
+    public static java.time.Duration lastTickTime = java.time.Duration.ZERO; // Yatopia
 
     protected void runServer() {
         try {
@@ -1173,7 +1174,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.nextTickTime += 50L;
                 this.startMetricsRecordingTick();
                 this.profiler.push("tick");
+                long tickStart = System.nanoTime(); // Yatopia
                 this.tickServer(this::haveTime);
+                lastTickTime = java.time.Duration.ofNanos(System.nanoTime() - tickStart); // Yatopia
                 this.profiler.popPush("nextTickWait");
                 this.mayHaveDelayedTasks = true;
                 this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 91a4efbca0c8356220148af17865ea20a3acd39a..4121a5f6d5f3b128cdf24a720569e0d36e357636 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2918,6 +2918,12 @@ public final class CraftServer implements Server {
     public CraftPotionBrewer getPotionBrewer() {
         return this.potionBrewer;
     }
-
     // Paper end
+
+    // Yatopia start
+    @Override
+    public java.time.Duration getLastTickTime() {
+        return net.minecraft.server.MinecraftServer.lastTickTime;
+    }
+    // Yatopia end
 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index bf970bf3356a914459c2d6db93537ce2d32c7e18..d625a7d0c350113cec0da7ac01ea83a20ea8d7f8 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -42,6 +42,10 @@ public class TicksPerSecondCommand extends Command
         builder.append(net.kyori.adventure.text.Component.text("TPS from last 1m, 5m, 15m: ", net.kyori.adventure.text.format.NamedTextColor.GOLD));
         builder.append(net.kyori.adventure.text.Component.join(net.kyori.adventure.text.JoinConfiguration.commas(true), tpsAvg));
         sender.sendMessage(builder.asComponent());
+        // Yatopia start - Last tick time API
+        java.time.Duration lastTickTime = org.bukkit.Bukkit.getLastTickTime();
+        sender.sendMessage(ChatColor.GOLD + "Last tick: " + TicksPerSecondCommand.formatTo( lastTickTime, java.util.concurrent.TimeUnit.MILLISECONDS ) + " (" + formatTo( lastTickTime, java.util.concurrent.TimeUnit.NANOSECONDS ) + ")");
+        // Yatopia end
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(net.kyori.adventure.text.Component.text()
                 .append(net.kyori.adventure.text.Component.text("Current Memory Usage: ", net.kyori.adventure.text.format.NamedTextColor.GOLD))
@@ -66,4 +70,15 @@ public class TicksPerSecondCommand extends Command
         return net.kyori.adventure.text.Component.text(amount, color);
         // Paper end
     }
+
+    // Yatopia start - Last tick time API
+    public static String formatTo(java.time.Duration duration, java.util.concurrent.TimeUnit unit) {
+        java.util.concurrent.TimeUnit nanosUnit = java.util.concurrent.TimeUnit.NANOSECONDS;
+        long nanos = duration.toNanos();
+        long toAskedUnit = unit.convert( nanos, nanosUnit );
+        long ms = nanosUnit.toMillis( nanos );
+        ChatColor startingColor = ms < 40 ? ChatColor.GREEN : ( ms < 50 ) ? ChatColor.YELLOW : ChatColor.RED;
+        return startingColor.toString() + toAskedUnit + ChatColor.GOLD + org.yatopiamc.yatopia.server.util.TimeUtils.getFriendlyName( unit );
+    }
+    // Yatopia end
 }
