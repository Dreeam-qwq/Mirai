From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Sun, 27 Sep 2020 18:30:10 +0300
Subject: [PATCH] Add last tick time API

Original code by YatopiaMC, licensed under MIT
You can find the original code on https://github.com/YatopiaMC/Yatopia

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 68de58849f541ddf8cccdc11beb4245c01f62258..1f3596ce6919b775e11a1ddcba20ff9423f1c561 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1125,6 +1125,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Spigot End
 
     public static volatile RuntimeException chunkSystemCrash; // Paper - rewrite chunk system
+    public static java.time.Duration lastTickDuration = java.time.Duration.ZERO; // Yatopia
 
     protected void runServer() {
         try {
@@ -1214,9 +1215,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.nextTickTimeNanos += i;
                 this.startMetricsRecordingTick();
                 this.profiler.push("tick");
+                long tickStart = System.nanoTime(); // Yatopia
                 this.tickServer(flag ? () -> {
                     return false;
                 } : this::haveTime);
+                lastTickDuration = java.time.Duration.ofNanos(System.nanoTime() - tickStart); // Yatopia
                 this.profiler.popPush("nextTickWait");
                 this.mayHaveDelayedTasks = true;
                 this.delayedTasksMaxNextTickTimeNanos = Math.max(Util.getNanos() + i, this.nextTickTimeNanos);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 1ee264c16ce24df492b556e086ceba28de6b0552..7805b768efac13e4481099cdb190f68231950f26 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3230,6 +3230,12 @@ public final class CraftServer implements Server {
     public CraftPotionBrewer getPotionBrewer() {
         return this.potionBrewer;
     }
-
     // Paper end
+
+    // Yatopia start
+    @Override
+    public java.time.Duration getLastTickDuration() {
+        return net.minecraft.server.MinecraftServer.lastTickDuration;
+    }
+    // Yatopia end
 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 9eb2823cc8f83bad2626fc77578b0162d9ed5782..d7c8f2737c64e0036bccc7ef3d73af7af2d3b1d3 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,7 +1,5 @@
 package org.spigotmc;
 
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
@@ -42,6 +40,16 @@ public class TicksPerSecondCommand extends Command
         builder.append(net.kyori.adventure.text.Component.text("TPS from last 1m, 5m, 15m: ", net.kyori.adventure.text.format.NamedTextColor.GOLD));
         builder.append(net.kyori.adventure.text.Component.join(net.kyori.adventure.text.JoinConfiguration.commas(true), tpsAvg));
         sender.sendMessage(builder.asComponent());
+        // Yatopia start - Last tick duration API
+        java.time.Duration lastTickDuration = org.bukkit.Bukkit.getLastTickDuration();
+        sender.sendMessage(net.kyori.adventure.text.Component.text()
+            .append(net.kyori.adventure.text.Component.text("Last tick: ", net.kyori.adventure.text.format.NamedTextColor.GOLD))
+            .append(TicksPerSecondCommand.formatTo(lastTickDuration, java.util.concurrent.TimeUnit.MILLISECONDS))
+            .append(net.kyori.adventure.text.Component.text(" (", net.kyori.adventure.text.format.NamedTextColor.GOLD))
+            .append(TicksPerSecondCommand.formatTo(lastTickDuration, java.util.concurrent.TimeUnit.NANOSECONDS))
+            .append(net.kyori.adventure.text.Component.text(")", net.kyori.adventure.text.format.NamedTextColor.GOLD))
+            .build());
+        // Yatopia end
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(net.kyori.adventure.text.Component.text()
                 .append(net.kyori.adventure.text.Component.text("Current Memory Usage: ", net.kyori.adventure.text.format.NamedTextColor.GOLD))
@@ -66,4 +74,16 @@ public class TicksPerSecondCommand extends Command
         return net.kyori.adventure.text.Component.text(amount, color);
         // Paper end
     }
+
+    // Yatopia start - Last tick duration API
+    public static net.kyori.adventure.text.Component formatTo(java.time.Duration duration, java.util.concurrent.TimeUnit unit) {
+        java.util.concurrent.TimeUnit nanosUnit = java.util.concurrent.TimeUnit.NANOSECONDS;
+        long nanos = duration.toNanos();
+        long toAskedUnit = unit.convert(nanos, nanosUnit);
+        long ms = nanosUnit.toMillis(nanos);
+        net.kyori.adventure.text.format.TextColor startingColor = ms < 40 ? net.kyori.adventure.text.format.NamedTextColor.GREEN : (ms < 50) ? net.kyori.adventure.text.format.NamedTextColor.YELLOW : net.kyori.adventure.text.format.NamedTextColor.RED;
+        return net.kyori.adventure.text.Component.text(toAskedUnit, startingColor)
+            .append(net.kyori.adventure.text.Component.text(org.yatopiamc.yatopia.server.util.TimeUtils.getFriendlyName(unit), net.kyori.adventure.text.format.NamedTextColor.GOLD));
+    }
+    // Yatopia end
 }
