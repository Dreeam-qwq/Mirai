From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Gero <gecam59@gmail.com>
Date: Sat, 2 Oct 2021 20:08:30 +0200
Subject: [PATCH] PaperPR Fix CME in CraftPersistentDataTypeRegistry

Original code by PaperMC, licensed under GPL v3
You can find the original code on https://github.com/PaperMC/Paper/pull/8425

diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
index b851581103c72c9a9eb2b3cdd783fca1ee34bed3..bba1fd311904f3f0a8b50e5bf596a909a15b8233 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
@@ -90,6 +90,15 @@ public final class CraftPersistentDataTypeRegistry {
     }
 
     private final Map<Class, TagAdapter> adapters = new java.util.concurrent.ConcurrentHashMap<>(); // Paper - Replace HashMap with ConcurrentHashMap to avoid CME
+    // Paper start - Fix CME
+    private TagAdapter getAdapter(Class type) {
+        TagAdapter adapter = this.adapters.get(type);
+        if (adapter != null) return adapter;
+        synchronized (this.adapters) {
+            return this.adapters.computeIfAbsent(type, CREATE_ADAPTER);
+        }
+    }
+    // Paper end - Fix CME
 
     /**
      * Creates a suitable adapter instance for the primitive class type
@@ -209,7 +218,7 @@ public final class CraftPersistentDataTypeRegistry {
      * type was found
      */
     public <T> Tag wrap(Class<T> type, T value) {
-        return this.adapters.computeIfAbsent(type, CREATE_ADAPTER).build(value);
+        return getAdapter(type).build(value); // Paper - Fix CME
     }
 
     /**
@@ -225,7 +234,7 @@ public final class CraftPersistentDataTypeRegistry {
      * type was found
      */
     public <T> boolean isInstanceOf(Class<T> type, Tag base) {
-        return this.adapters.computeIfAbsent(type, CREATE_ADAPTER).isInstance(base);
+        return getAdapter(type).isInstance(base); // Paper - Fix CME
     }
 
     /**
@@ -246,7 +255,7 @@ public final class CraftPersistentDataTypeRegistry {
      * type was found
      */
     public <T> T extract(Class<T> type, Tag tag) throws ClassCastException, IllegalArgumentException {
-        TagAdapter adapter = this.adapters.computeIfAbsent(type, CREATE_ADAPTER);
+        TagAdapter adapter = getAdapter(type); // Paper - Fix CME
         Preconditions.checkArgument(adapter.isInstance(tag), "The found tag instance (%s) cannot store %s", tag.getClass().getSimpleName(), type.getSimpleName());
 
         Object foundValue = adapter.extract(tag);
