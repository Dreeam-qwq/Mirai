From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: etil2jz <81570777+etil2jz@users.noreply.github.com>
Date: Sun, 8 May 2022 13:13:02 +0200
Subject: [PATCH] Optimize default values for configs


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index a6f58b3457b7477015c5c6d969e7d83017dd3fa1..0e37d98b5908382a242729408d0b9f0eaaa502bf 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -95,9 +95,9 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     @Deprecated(forRemoval = true)
     public class Timings extends ConfigurationPart {
-        public boolean enabled = true;
+        public boolean enabled = false; // Mirai - optimize default values for configs
         public boolean verbose = true;
-        public String url = "https://timings.aikar.co/";
+        public String url = "https://timin.gs/"; // Mirai - optimize default values for configs
         public boolean serverNamePrivacy = false;
         public List<String> hiddenConfigEntries = List.of(
             "database",
@@ -325,9 +325,9 @@ public class GlobalConfiguration extends ConfigurationPart {
         public boolean fixEntityPositionDesync = true;
         public boolean loadPermissionsYmlBeforePlugins = true;
         @Constraints.Min(4)
-        public int regionFileCacheSize = 256;
+        public int regionFileCacheSize = 512; // Mirai - optimize default values for configs
         @Comment("See https://luckformula.emc.gs")
-        public boolean useAlternativeLuckFormula = false;
+        public boolean useAlternativeLuckFormula = true; // Mirai - optimize default values for configs
         public boolean useDimensionTypeForCustomSpawners = false;
         public boolean strictAdvancementDimensionCheck = false;
         public IntOr.Default compressionLevel = IntOr.Default.USE_DEFAULT;
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index c9ae7e88afb1ca8349a118c6b491a1e1e83517a7..7d0b9e7c55da2e0d577b66b3bf134020653c8e97 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -128,8 +128,8 @@ public class WorldConfiguration extends ConfigurationPart {
         public ArmorStands armorStands;
 
         public class ArmorStands extends ConfigurationPart {
-            public boolean doCollisionEntityLookups = true;
-            public boolean tick = true;
+            public boolean doCollisionEntityLookups = false; // Mirai - optimize default values for configs
+            public boolean tick = false; // Mirai - optimize default values for configs
         }
 
         public Markers markers;
@@ -228,7 +228,7 @@ public class WorldConfiguration extends ConfigurationPart {
 
         public class Behavior extends ConfigurationPart {
             public boolean disableChestCatDetection = false;
-            public boolean spawnerNerfedMobsShouldJump = false;
+            public boolean spawnerNerfedMobsShouldJump = true; // Mirai - optimize default values for configs
             public int experienceMergeMaxValue = -1;
             public boolean shouldRemoveDragon = false;
             public boolean zombiesTargetTurtleEggs = true;
@@ -275,7 +275,7 @@ public class WorldConfiguration extends ConfigurationPart {
             public int playerInsomniaStartTicks = 72000;
             public int phantomsSpawnAttemptMinSeconds = 60;
             public int phantomsSpawnAttemptMaxSeconds = 119;
-            public boolean parrotsAreUnaffectedByPlayerMovement = false;
+            public boolean parrotsAreUnaffectedByPlayerMovement = true; // Mirai - optimize default values for configs
             @BelowZeroToEmpty
             public DoubleOr.Default zombieVillagerInfectionChance = DoubleOr.Default.USE_DEFAULT;
             public MobsCanAlwaysPickUpLoot mobsCanAlwaysPickUpLoot;
@@ -380,7 +380,7 @@ public class WorldConfiguration extends ConfigurationPart {
     public class Environment extends ConfigurationPart {
         public boolean disableThunder = false;
         public boolean disableIceAndSnow = false;
-        public boolean optimizeExplosions = false;
+        public boolean optimizeExplosions = true; // Mirai - optimize default values for configs
         public boolean disableExplosionKnockback = false;
         public boolean generateFlatBedrock = false;
         public FrostedIce frostedIce;
@@ -426,7 +426,7 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class Maps extends ConfigurationPart {
         public int itemFrameCursorLimit = 128;
-        public int itemFrameCursorUpdateInterval = 10;
+        public int itemFrameCursorUpdateInterval = 20; // Mirai - optimize default values for configs
     }
 
     public Fixes fixes;
@@ -452,7 +452,7 @@ public class WorldConfiguration extends ConfigurationPart {
     public class Hopper extends ConfigurationPart {
         public boolean cooldownWhenFull = true;
         public boolean disableMoveEvent = false;
-        public boolean ignoreOccludingBlocks = false;
+        public boolean ignoreOccludingBlocks = true; // Mirai - optimize default values for configs
     }
 
     public Collisions collisions;
@@ -460,9 +460,9 @@ public class WorldConfiguration extends ConfigurationPart {
     public class Collisions extends ConfigurationPart {
         public boolean onlyPlayersCollide = false;
         public boolean allowVehicleCollisions = true;
-        public boolean fixClimbingBypassingCrammingRule = false;
+        public boolean fixClimbingBypassingCrammingRule = true; // Mirai - optimize default values for configs
         @RequiresSpigotInitialization(MaxEntityCollisionsInitializer.class)
-        public int maxEntityCollisions = 8;
+        public int maxEntityCollisions = 1; // Mirai - optimize default values for configs
         public boolean allowPlayerCrammingDamage = false;
     }
 
@@ -470,18 +470,32 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class Chunks extends ConfigurationPart {
         public AutosavePeriod autoSaveInterval = AutosavePeriod.def();
-        public int maxAutoSaveChunksPerTick = 24;
+        public int maxAutoSaveChunksPerTick = 12; // Mirai - optimize default values for configs
         public int fixedChunkInhabitedTime = -1;
-        public boolean preventMovingIntoUnloadedChunks = false;
-        public Duration delayChunkUnloadsBy = Duration.of("10s");
+        public boolean preventMovingIntoUnloadedChunks = true; // Mirai - optimize default values for configs
+        public Duration delayChunkUnloadsBy = Duration.of("10s"); // Mirai - optimize default values for configs
         public Reference2IntMap<EntityType<?>> entityPerChunkSaveLimit = Util.make(new Reference2IntOpenHashMap<>(BuiltInRegistries.ENTITY_TYPE.size()), map -> {
             map.defaultReturnValue(-1);
-            map.put(EntityType.EXPERIENCE_ORB, -1);
-            map.put(EntityType.SNOWBALL, -1);
-            map.put(EntityType.ENDER_PEARL, -1);
-            map.put(EntityType.ARROW, -1);
-            map.put(EntityType.FIREBALL, -1);
-            map.put(EntityType.SMALL_FIREBALL, -1);
+            // Mirai start - optimize default values for configs
+            map.put(EntityType.EXPERIENCE_ORB, 16);
+            map.put(EntityType.SNOWBALL, 8);
+            map.put(EntityType.ENDER_PEARL, 8);
+            map.put(EntityType.ARROW, 16);
+            map.put(EntityType.FIREBALL, 8);
+            map.put(EntityType.SMALL_FIREBALL, 8);
+            map.put(EntityType.DRAGON_FIREBALL, 3);
+            map.put(EntityType.EGG, 8);
+            map.put(EntityType.EYE_OF_ENDER, 8);
+            map.put(EntityType.FIREWORK_ROCKET, 8);
+            map.put(EntityType.POTION, 8);
+            map.put(EntityType.LLAMA_SPIT, 3);
+            map.put(EntityType.SHULKER_BULLET, 8);
+            map.put(EntityType.SPECTRAL_ARROW, 16);
+            map.put(EntityType.EXPERIENCE_BOTTLE, 3);
+            map.put(EntityType.TRIDENT, 16);
+            map.put(EntityType.WITHER_SKULL, 4);
+            map.put(EntityType.AREA_EFFECT_CLOUD, 8);
+            // Mirai end
         });
         public boolean flushRegionsOnSave = false;
     }
@@ -496,11 +510,22 @@ public class WorldConfiguration extends ConfigurationPart {
     public TickRates tickRates;
 
     public class TickRates extends ConfigurationPart {
-        public int grassSpread = 1;
-        public int containerUpdate = 1;
-        public int mobSpawner = 1;
-        public Table<EntityType<?>, String, Integer> sensor = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "secondarypoisensor", 40));
-        public Table<EntityType<?>, String, Integer> behavior = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "validatenearbypoi", -1));
+        // Mirai start - optimize default values for configs
+        public int grassSpread = 4;
+        public int containerUpdate = 3;
+        public int mobSpawner = 2;
+        public Table<EntityType<?>, String, Integer> sensor = Util.make(HashBasedTable.create(), table -> {
+            table.put(EntityType.VILLAGER, "secondarypoisensor", 80);
+            table.put(EntityType.VILLAGER, "nearestbedsensor", 80);
+            table.put(EntityType.VILLAGER, "villagerbabiessensor", 40);
+            table.put(EntityType.VILLAGER, "playersensor", 40);
+            table.put(EntityType.VILLAGER, "nearestlivingentitysensor", 40);
+        });
+        public Table<EntityType<?>, String, Integer> behavior = Util.make(HashBasedTable.create(), table -> {
+            table.put(EntityType.VILLAGER, "validatenearbypoi", -1);  // Mirai - optimize default values for configs
+            table.put(EntityType.VILLAGER, "acquirepoi", 120);
+        });
+        // Mirai end
     }
 
     @Setting(FeatureSeedsGeneration.FEATURE_SEEDS_KEY)
@@ -509,7 +534,7 @@ public class WorldConfiguration extends ConfigurationPart {
     public class FeatureSeeds extends ConfigurationPart {
         @SuppressWarnings("unused") // Is used in FeatureSeedsGeneration
         @Setting(FeatureSeedsGeneration.GENERATE_KEY)
-        public boolean generateRandomSeedsForAll = false;
+        public boolean generateRandomSeedsForAll = true; // Mirai - optimize default values for configs
         @Setting(FeatureSeedsGeneration.FEATURES_KEY)
         public Reference2LongMap<Holder<ConfiguredFeature<?, ?>>> features = new Reference2LongOpenHashMap<>();
 
@@ -523,9 +548,9 @@ public class WorldConfiguration extends ConfigurationPart {
 
     public class Misc extends ConfigurationPart {
         public int lightQueueSize = 20;
-        public boolean updatePathfindingOnBlockUpdate = true;
+        public boolean updatePathfindingOnBlockUpdate = false; // Mirai - optimize default values for configs
         public boolean showSignClickCommandFailureMsgsToPlayer = false;
-        public RedstoneImplementation redstoneImplementation = RedstoneImplementation.VANILLA;
+        public RedstoneImplementation redstoneImplementation = RedstoneImplementation.EIGENCRAFT; // Mirai - optimize default values for configs
         public boolean disableEndCredits = false;
         public float maxLeashDistance = 10f;
         public boolean disableSprintInterruptionOnAttack = false;
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 612c3169c3463d702b85975e1db79ae6e47d60d0..3bc58a858049153caa1d32d96c035b161ec86464 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -218,7 +218,7 @@ public class SpigotConfig
         SpigotConfig.outdatedServerMessage = SpigotConfig.transform( SpigotConfig.getString( "messages.outdated-server", SpigotConfig.outdatedServerMessage ) );
     }
 
-    public static int timeoutTime = 60;
+    public static int timeoutTime = 120; // Mirai - optimize default values for configs
     public static boolean restartOnCrash = true;
     public static String restartScript = "./start.sh";
     public static String restartMessage;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 2f1c566c6236dfda251155733a5b370c704e5a14..cab7a4bb6d1fccdab128833a935db055542b1e8b 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -150,14 +150,14 @@ public class SpigotWorldConfig
     public double itemMerge;
     private void itemMerge()
     {
-        this.itemMerge = this.getDouble("merge-radius.item", 2.5 );
+        this.itemMerge = this.getDouble("merge-radius.item", 3.0 ); // Mirai - optimize default values for configs
         this.log( "Item Merge Radius: " + this.itemMerge );
     }
 
     public double expMerge;
     private void expMerge()
     {
-        this.expMerge = this.getDouble("merge-radius.exp", 3.0 );
+        this.expMerge = this.getDouble("merge-radius.exp", 4.0 ); // Mirai - optimize default values for configs
         this.log( "Experience Merge Radius: " + this.expMerge );
     }
 
@@ -196,7 +196,7 @@ public class SpigotWorldConfig
     public byte mobSpawnRange;
     private void mobSpawnRange()
     {
-        this.mobSpawnRange = (byte) getInt( "mob-spawn-range", 8 ); // Paper - Vanilla
+        this.mobSpawnRange = (byte) getInt( "mob-spawn-range", 2 ); // Paper - Vanilla // Mirai - optimize default values for configs
         this.log( "Mob Spawn Range: " + this.mobSpawnRange );
     }
 
@@ -207,14 +207,14 @@ public class SpigotWorldConfig
         this.log( "Item Despawn Rate: " + this.itemDespawnRate );
     }
 
-    public int animalActivationRange = 32;
-    public int monsterActivationRange = 32;
-    public int raiderActivationRange = 48;
-    public int miscActivationRange = 16;
+    public int animalActivationRange = 16; // Mirai - optimize default values for configs
+    public int monsterActivationRange = 24; // Mirai - optimize default values for configs
+    public int raiderActivationRange = 32; // Mirai - optimize default values for configs
+    public int miscActivationRange = 8; // Mirai - optimize default values for configs
     // Paper start
-    public int flyingMonsterActivationRange = 32;
-    public int waterActivationRange = 16;
-    public int villagerActivationRange = 32;
+    public int flyingMonsterActivationRange = 24; // Mirai - optimize default values for configs
+    public int waterActivationRange = 8; // Mirai - optimize default values for configs
+    public int villagerActivationRange = 16; // Mirai - optimize default values for configs
     public int wakeUpInactiveAnimals = 4;
     public int wakeUpInactiveAnimalsEvery = 60*20;
     public int wakeUpInactiveAnimalsFor = 5*20;
@@ -231,7 +231,7 @@ public class SpigotWorldConfig
     public int villagersWorkImmunityFor = 20;
     public boolean villagersActiveForPanic = true;
     // Paper end
-    public boolean tickInactiveVillagers = true;
+    public boolean tickInactiveVillagers = false; // Mirai - optimize default values for configs
     public boolean ignoreSpectatorActivation = false;
     private void activationRange()
     {
@@ -270,12 +270,13 @@ public class SpigotWorldConfig
         this.log( "Entity Activation Range: An " + this.animalActivationRange + " / Mo " + this.monsterActivationRange + " / Ra " + this.raiderActivationRange + " / Mi " + this.miscActivationRange + " / Tiv " + this.tickInactiveVillagers + " / Isa " + this.ignoreSpectatorActivation );
     }
 
-    public int playerTrackingRange = 48;
-    public int animalTrackingRange = 48;
-    public int monsterTrackingRange = 48;
-    public int miscTrackingRange = 32;
-    public int displayTrackingRange = 128;
-    public int otherTrackingRange = 64;
+    public int playerTrackingRange = 32; // Mirai - optimize default values for configs
+    public int animalTrackingRange = 24; // Mirai - optimize default values for configs
+    public int monsterTrackingRange = 24; // Mirai - optimize default values for configs
+    public int miscTrackingRange = 16; // Mirai - optimize default values for configs
+    public int displayTrackingRange = 64; // Mirai - optimize default values for configs
+    public int otherTrackingRange = 32; // Mirai - optimize default values for configs
+
     private void trackingRange()
     {
         this.playerTrackingRange = this.getInt( "entity-tracking-range.players", this.playerTrackingRange );
@@ -294,13 +295,13 @@ public class SpigotWorldConfig
     private void hoppers()
     {
         // Set the tick delay between hopper item movements
-        this.hopperTransfer = this.getInt( "ticks-per.hopper-transfer", 8 );
+        this.hopperTransfer = this.getInt( "ticks-per.hopper-transfer", 24 ); // Mirai - optimize default values for configs
         if ( SpigotConfig.version < 11 )
         {
             this.set( "ticks-per.hopper-check", 1 );
         }
-        this.hopperCheck = this.getInt( "ticks-per.hopper-check", 1 );
-        this.hopperAmount = this.getInt( "hopper-amount", 1 );
+        this.hopperCheck = this.getInt( "ticks-per.hopper-check", 3 ); // Mirai - optimize default values for configs
+        this.hopperAmount = this.getInt( "hopper-amount", 3 ); // Mirai - optimize default values for configs
         this.hopperCanLoadChunks = this.getBoolean( "hopper-can-load-chunks", false );
         this.log( "Hopper Transfer: " + this.hopperTransfer + " Hopper Check: " + this.hopperCheck + " Hopper Amount: " + this.hopperAmount + " Hopper Can Load Chunks: " + this.hopperCanLoadChunks );
     }
@@ -309,7 +310,7 @@ public class SpigotWorldConfig
     public int tridentDespawnRate;
     private void arrowDespawnRate()
     {
-        this.arrowDespawnRate = this.getInt( "arrow-despawn-rate", 1200 );
+        this.arrowDespawnRate = this.getInt( "arrow-despawn-rate", 20 ); // Mirai - optimize default values for configs
         this.tridentDespawnRate = this.getInt( "trident-despawn-rate", this.arrowDespawnRate );
         this.log( "Arrow Despawn Rate: " + this.arrowDespawnRate + " Trident Respawn Rate:" + this.tridentDespawnRate );
     }
@@ -324,14 +325,14 @@ public class SpigotWorldConfig
     public boolean nerfSpawnerMobs;
     private void nerfSpawnerMobs()
     {
-        this.nerfSpawnerMobs = this.getBoolean( "nerf-spawner-mobs", false );
+        this.nerfSpawnerMobs = this.getBoolean( "nerf-spawner-mobs", true ); // Mirai - optimize default values for configs
         this.log( "Nerfing mobs spawned from spawners: " + this.nerfSpawnerMobs );
     }
 
     public boolean enableZombiePigmenPortalSpawns;
     private void enableZombiePigmenPortalSpawns()
     {
-        this.enableZombiePigmenPortalSpawns = this.getBoolean( "enable-zombie-pigmen-portal-spawns", true );
+        this.enableZombiePigmenPortalSpawns = this.getBoolean( "enable-zombie-pigmen-portal-spawns", false ); // Mirai - optimize default values for configs
         this.log( "Allow Zombie Pigmen to spawn from portal blocks: " + this.enableZombiePigmenPortalSpawns );
     }
 
@@ -344,7 +345,7 @@ public class SpigotWorldConfig
     public int witherSpawnSoundRadius;
     private void witherSpawnSoundRadius()
     {
-        this.witherSpawnSoundRadius = this.getInt( "wither-spawn-sound-radius", 0 );
+        this.witherSpawnSoundRadius = this.getInt( "wither-spawn-sound-radius", 128 ); // Mirai - optimize default values for configs
     }
 
     public int endPortalSoundRadius;
@@ -440,14 +441,14 @@ public class SpigotWorldConfig
         {
             this.set( "max-tnt-per-tick", 100 );
         }
-        this.maxTntTicksPerTick = this.getInt( "max-tnt-per-tick", 100 );
+        this.maxTntTicksPerTick = this.getInt( "max-tnt-per-tick", 200 ); // Mirai - optimize default values for configs
         this.log( "Max TNT Explosions: " + this.maxTntTicksPerTick );
     }
 
     public int hangingTickFrequency;
     private void hangingTickFrequency()
     {
-        this.hangingTickFrequency = this.getInt( "hanging-tick-frequency", 100 );
+        this.hangingTickFrequency = this.getInt( "hanging-tick-frequency", 200 ); // Mirai - optimize default values for configs
     }
 
     /* JettPack - remove tick limiter
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index eef7c125b2689f29cae5464659eacdf33f5695b2..480dc4dd7d168da90457e808c7e6a9a5f6ff900c 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -17,29 +17,29 @@ settings:
     permissions-file: permissions.yml
     update-folder: update
     plugin-profiling: false
-    connection-throttle: 4000
-    query-plugins: true
+    connection-throttle: -1
+    query-plugins: false
     deprecated-verbose: default
     shutdown-message: Server closed
     minimum-api: none
     use-map-color-cache: true
 spawn-limits:
-    monsters: 70
-    animals: 10
-    water-animals: 5
-    water-ambient: 20
-    water-underground-creature: 5
-    axolotls: 5
-    ambient: 15
+    monsters: 20
+    animals: 5
+    water-animals: 3
+    water-ambient: 6
+    water-underground-creature: 3
+    axolotls: 3
+    ambient: 2
 chunk-gc:
-    period-in-ticks: 600
+    period-in-ticks: 400
 ticks-per:
     animal-spawns: 400
-    monster-spawns: 1
-    water-spawns: 1
-    water-ambient-spawns: 1
-    water-underground-creature-spawns: 1
-    axolotl-spawns: 1
-    ambient-spawns: 1
+    monster-spawns: 10
+    water-spawns: 200
+    water-ambient-spawns: 200
+    water-underground-creature-spawns: 200
+    axolotl-spawns: 200
+    ambient-spawns: 200
     autosave: 6000
 aliases: now-in-commands.yml
diff --git a/src/main/resources/configurations/commands.yml b/src/main/resources/configurations/commands.yml
index 18f54571200e2eca09a39b88f170fe7b99d8618f..1b57d51d92c5c69286800d10baeaa936fa208cae 100644
--- a/src/main/resources/configurations/commands.yml
+++ b/src/main/resources/configurations/commands.yml
@@ -12,5 +12,3 @@
 command-block-overrides: []
 ignore-vanilla-permissions: false
 aliases:
-    icanhasbukkit:
-      - "version $1-"
