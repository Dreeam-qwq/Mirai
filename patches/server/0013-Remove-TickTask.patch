From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foss-mc <69294560+foss-mc@users.noreply.github.com>
Date: Thu, 1 Jul 2021 11:59:11 +0000
Subject: [PATCH] Remove TickTask

Original code by PatinaMC, licensed under GPL v3
You can find the original code on https://github.com/PatinaMC/Patina

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b2150169f3c77898e461da47b8da3ce5693248ed..72652084cc92f642230c9415cefd31601a15125f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -194,7 +194,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnable> implements CommandSource, AutoCloseable { // Patina
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogUtils.getLogger();
@@ -1319,19 +1319,21 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     @Override
-    public TickTask wrapRunnable(Runnable runnable) {
+    public Runnable wrapRunnable(Runnable runnable) { // Patina
         // Paper start - anything that does try to post to main during watchdog crash, run on watchdog
         if (this.hasStopped && Thread.currentThread().equals(shutdownThread)) {
             runnable.run();
             runnable = () -> {};
         }
         // Paper end
-        return new TickTask(this.tickCount, runnable);
+        return runnable; // Patina
     }
 
+    /* // Patina
     protected boolean shouldRun(TickTask ticktask) {
         return ticktask.getTick() + 3 < this.tickCount || this.haveTime();
     }
+    */
 
     @Override
     public boolean pollTask() {
@@ -1363,10 +1365,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
     }
 
+    /* // Patina
     public void doRunTask(TickTask ticktask) { // CraftBukkit - decompile error
         //this.getProfiler().incrementCounter("runTask"); // Purpur
         super.doRunTask(ticktask);
     }
+    */
 
     private Optional<ServerStatus.Favicon> loadStatusIcon() {
         Optional<Path> optional = Optional.of(this.getFile("server-icon.png").toPath()).filter((path) -> {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 2d5b0f293bb30243e774bfb62b8100c01e7eb383..114e09469913e4e8bb96b39be76bdfb9b4cba948 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -883,10 +883,12 @@ public class ServerChunkCache extends ChunkSource {
             return runnable;
         }
 
+        /* // Patina
         @Override
         protected boolean shouldRun(Runnable task) {
             return true;
         }
+        */
 
         @Override
         protected boolean scheduleExecutables() {
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 83701fbfaa56a232593ee8f11a3afb8941238bfa..9b71f38bf10b63c0a4304a053540c9c00099bf47 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -29,7 +29,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
 
     protected abstract R wrapRunnable(Runnable runnable);
 
-    protected abstract boolean shouldRun(R task);
+    //protected abstract boolean shouldRun(R task); // Patina
 
     public boolean isSameThread() {
         return Thread.currentThread() == this.getRunningThread();
@@ -120,7 +120,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
         R runnable = this.pendingRunnables.peek();
         if (runnable == null) {
             return false;
-        } else if (this.blockingCount == 0 && !this.shouldRun(runnable)) {
+        } else if (this.blockingCount == 0 && !true/*this.shouldRun(runnable)*/) { // Patina
             return false;
         } else {
             this.doRunTask(this.pendingRunnables.remove());
