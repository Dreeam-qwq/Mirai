From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: etil2jz <81570777+etil2jz@users.noreply.github.com>
Date: Wed, 29 Jun 2022 02:17:00 +0200
Subject: [PATCH] Optimize `Math.round` and `Math.hypot` functions

Original code by fxmorin, licensed under MIT
You can find the original code on https://github.com/fxmorin/carpet-fixes (Yarn mappings)

diff --git a/src/main/java/carpetfixes/helpers/FastMath.java b/src/main/java/carpetfixes/helpers/FastMath.java
new file mode 100644
index 0000000000000000000000000000000000000000..758a184db7bb4e57e383b40668389e35101fb7ec
--- /dev/null
+++ b/src/main/java/carpetfixes/helpers/FastMath.java
@@ -0,0 +1,59 @@
+package carpetfixes.helpers;
+
+public class FastMath {
+
+    private static final double HYPOT_MAX_MAG = 2 ^ 511;
+    private static final double HYPOT_FACTOR = 2 ^ 750;
+
+    /**
+     * @author FX - PR0CESS
+     * ~1.25x faster than {@link Math#round(float)}
+     */
+    public static int round(float a) {
+        if (dev.etil.mirai.MiraiConfig.optimizedRound) return a > 0F ? (int) (a + .5F) : (int) (a - .5F);
+        return Math.round(a);
+    }
+
+    /**
+     * @author FX - PR0CESS
+     * ~1.28x faster than {@link Math#round(double)}
+     */
+    public static long round(double a) {
+        if (dev.etil.mirai.MiraiConfig.optimizedRound) return a > 0D ? (long) (a + .5D) : (long) (a - .5D);
+        return Math.round(a);
+    }
+
+    /**
+     * @author FX - PR0CESS
+     * Hypot implementation from the jafama library. Not 100% accurate! (3E-14%, 15 is perfectly accurate)
+     * ~1.6x faster than {@link Math#hypot(double, double)}
+     */
+    public static double hypot(double x, double y) {
+        x = Math.abs(x);
+        y = Math.abs(y);
+        if (y < x) { // Ensuring x <= y
+            final double a = x;
+            x = y;
+            y = a;
+        } else if (!(y >= x)) { // Testing if we have some NaN
+            return x == Double.POSITIVE_INFINITY ? Double.POSITIVE_INFINITY : Double.NaN;
+        }
+        if (y - x == y) { // x too small to subtract from y
+            return y;
+        } else {
+            double factor;
+            if (y > HYPOT_MAX_MAG) { // y is too large: scaling down
+                x *= (1 / HYPOT_FACTOR);
+                y *= (1 / HYPOT_FACTOR);
+                factor = HYPOT_FACTOR;
+            } else if (x < (1 / HYPOT_MAX_MAG)) { // x is too small: scaling up
+                x *= HYPOT_FACTOR;
+                y *= HYPOT_FACTOR;
+                factor = (1 / HYPOT_FACTOR);
+            } else {
+                factor = 1.0;
+            }
+            return factor * Math.sqrt(x * x + y * y);
+        }
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 92eaba96135ccddb7d682dab7e82cde9318a48ef..22f37518ae2df5c75568025749cd6557eb2d9d56 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -81,6 +81,6 @@ public class RAMDetails extends JList<String> {
     }
 
     private static String format(double tps) {
-        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( carpetfixes.helpers.FastMath.round( tps * 100.0 ) / 100.0, 20.0 ); // Mirai
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
index c3e54da4ab6440811aab2f9dd1e218802ac13285..db1319c51a5410ee106d023fce759f1e390872e2 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
@@ -128,7 +128,7 @@ public class RAMGraph extends JComponent {
             graphics.setColor(data.getLineColor());
             graphics.fillOval(m.x - 2, 100 - used - 2, 5, 5);
             setToolTipText(String.format("<html><body>Used: %s mb (%s%%)<br/>%s</body></html>",
-                Math.round(data.getUsedMem() / 1024F / 1024F),
+                carpetfixes.helpers.FastMath.round(data.getUsedMem() / 1024F / 1024F), // Mirai
                 used, getTime(m.x)));
         }
     }
diff --git a/src/main/java/dev/etil/mirai/MiraiConfig.java b/src/main/java/dev/etil/mirai/MiraiConfig.java
index 9a3917c86da9c95fba76d45a2963198dd8eda605..17847031b4933d84a58f2210a171c600ef4c551c 100644
--- a/src/main/java/dev/etil/mirai/MiraiConfig.java
+++ b/src/main/java/dev/etil/mirai/MiraiConfig.java
@@ -177,4 +177,13 @@ public class MiraiConfig {
             "Whether or not server should use a faster method",
             "to check when entity delta movement is null.");
     }
+
+    public static boolean optimizedRound;
+    public static boolean optimizedHypot;
+    private static void fastMath() {
+        optimizedRound = getBoolean("optimize-math-round", true,
+            "Whether or not Math.round should be replaced by a faster version.");
+        optimizedHypot = getBoolean("optimize-math-hypot", true,
+            "Whether or not Math.hypot should be replaced by a faster version.");
+    }
 }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
index 463c6d8d5b114816ed9065558285945817c30385..1872fc7c724a3c12d38b9bbac0d8871ad48454a8 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
@@ -95,12 +95,12 @@ public final class FixLightCommand implements PaperSubcommand {
                 ++relitChunks[0];
                 sender.getBukkitEntity().sendMessage(text().color(DARK_AQUA).append(
                     text("Relit chunk ", BLUE), text(chunkPos.toString()),
-                    text(", progress: ", BLUE), text((int) (Math.round(100.0 * (double) (relitChunks[0]) / (double) pending[0])) + "%")
+                    text(", progress: ", BLUE), text((int) (carpetfixes.helpers.FastMath.round(100.0 * (double) (relitChunks[0]) / (double) pending[0])) + "%") // Mirai
                 ));
             },
             (final int totalRelit) -> {
                 final long end = System.nanoTime();
-                final long diff = Math.round(1.0e-6 * (end - start));
+                final long diff = carpetfixes.helpers.FastMath.round(1.0e-6 * (end - start)); // Mirai
                 sender.getBukkitEntity().sendMessage(text().color(DARK_AQUA).append(
                     text("Relit ", BLUE), text(totalRelit),
                     text(" chunks. Took ", BLUE), text(diff + "ms")
diff --git a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
index c54b6a6c3db25c896582a1ba5469080d3122361a..0d4ada5b1875b1852f4f1f09911ec2bad19af070 100644
--- a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
@@ -48,7 +48,7 @@ public class TimeArgument implements ArgumentType<Integer> {
         if (i == 0) {
             throw ERROR_INVALID_UNIT.create();
         } else {
-            int j = Math.round(f * (float)i);
+            int j = carpetfixes.helpers.FastMath.round(f * (float)i); // Mirai
             if (j < this.minimum) {
                 throw ERROR_TICK_COUNT_TOO_LOW.create(j, this.minimum);
             } else {
diff --git a/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java b/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
index 33d9131e9c75ef23cd637f5d6c39a2704a0c92a5..0a43a51f91a1d6e4d6a629fa32c9d1a57a35f0ef 100644
--- a/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
+++ b/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
@@ -9,7 +9,7 @@ public class VecDeltaCodec {
 
     @VisibleForTesting
     static long encode(double value) {
-        return Math.round(value * 4096.0D); // Paper - diff on change
+        return carpetfixes.helpers.FastMath.round(value * 4096.0D); // Paper - diff on change // Mirai
     }
 
     @VisibleForTesting
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 94adb08a5bb4e81e9d0d4e87ffe2331f069ca5a3..e2139c751c97edb6585e0b65dc8e27cca37ebf99 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1451,7 +1451,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
                     }
 
                     double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
-                    long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+                    long extraSleep = (long)carpetfixes.helpers.FastMath.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME); // Mirai
 
                     lastMidTickExecute = currTime + extraSleep;
                     return;
diff --git a/src/main/java/net/minecraft/server/gui/StatsComponent.java b/src/main/java/net/minecraft/server/gui/StatsComponent.java
index 4073484fefbf1ec6072013f6903f9237eb3ebfbc..fb4c4d25c8e070f72479c646df1f9a16d97fd968 100644
--- a/src/main/java/net/minecraft/server/gui/StatsComponent.java
+++ b/src/main/java/net/minecraft/server/gui/StatsComponent.java
@@ -79,7 +79,7 @@ public class StatsComponent extends JComponent {
 
     // Paper - start Add tps entry
     private static String format(double tps) {
-        return (( tps > 21.0 ) ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        return (( tps > 21.0 ) ? "*" : "") + Math.min(carpetfixes.helpers.FastMath.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
     }
     // Paper end
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 6c5bef7091352ec80599b9540ce253baccf7335f..98b59c6443a539c3bcb5699731a298aedea35f80 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1783,29 +1783,29 @@ public class ServerPlayer extends Player {
             int i;
 
             if (this.isSwimming()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F); // Mirai
                 if (i > 0) {
                     this.awardStat(Stats.SWIM_ONE_CM, i);
                     this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.SWIM); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.isEyeInFluid(FluidTags.WATER)) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F); // Mirai
                 if (i > 0) {
                     this.awardStat(Stats.WALK_UNDER_WATER_ONE_CM, i);
                     this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_UNDERWATER); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.isInWater()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F); // Mirai
                 if (i > 0) {
                     this.awardStat(Stats.WALK_ON_WATER_ONE_CM, i);
                     this.causeFoodExhaustion(this.level().spigotConfig.swimMultiplier * (float) i * 0.01F, EntityExhaustionEvent.ExhaustionReason.WALK_ON_WATER); // CraftBukkit - EntityExhaustionEvent // Spigot
                 }
             } else if (this.onClimbable()) {
                 if (deltaY > 0.0D) {
-                    this.awardStat(Stats.CLIMB_ONE_CM, (int) Math.round(deltaY * 100.0D));
+                    this.awardStat(Stats.CLIMB_ONE_CM, (int) carpetfixes.helpers.FastMath.round(deltaY * 100.0D)); // Mirai
                 }
             } else if (this.onGround()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F); // Mirai
                 if (i > 0) {
                     if (this.isSprinting()) {
                         this.awardStat(Stats.SPRINT_ONE_CM, i);
@@ -1819,10 +1819,10 @@ public class ServerPlayer extends Player {
                     }
                 }
             } else if (this.isFallFlying()) {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F); // Mirai
                 this.awardStat(Stats.AVIATE_ONE_CM, i);
             } else {
-                i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F);
+                i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaZ * deltaZ) * 100.0F); // Mirai
                 if (i > 25) {
                     this.awardStat(Stats.FLY_ONE_CM, i);
                 }
@@ -1833,7 +1833,7 @@ public class ServerPlayer extends Player {
 
     private void checkRidingStatistics(double deltaX, double deltaY, double deltaZ) {
         if (this.isPassenger() && !ServerPlayer.didNotMove(deltaX, deltaY, deltaZ)) {
-            int i = Math.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F);
+            int i = carpetfixes.helpers.FastMath.round((float) Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ) * 100.0F); // Mirai
             Entity entity = this.getVehicle();
 
             if (entity instanceof AbstractMinecart) {
diff --git a/src/main/java/net/minecraft/util/Mth.java b/src/main/java/net/minecraft/util/Mth.java
index a1af7b18db174bdc114f57bcf68f19ee23211205..55b86137bbbc62e0c8aedae7514eaa952f17791a 100644
--- a/src/main/java/net/minecraft/util/Mth.java
+++ b/src/main/java/net/minecraft/util/Mth.java
@@ -611,6 +611,7 @@ public class Mth {
     }
 
     public static double length(double a, double b) {
+        if (dev.etil.mirai.MiraiConfig.optimizedHypot) return carpetfixes.helpers.FastMath.hypot(a, b); // Mirai
         return Math.sqrt(lengthSquared(a, b));
     }
 
diff --git a/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java b/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java
index 52151082b031f250b13bfaa35417e1d934a54f60..9ab3ca431858331c80e6d38c2e8584a3136d5947 100644
--- a/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java
+++ b/src/main/java/net/minecraft/util/SegmentedAnglePrecision.java
@@ -37,7 +37,7 @@ public class SegmentedAnglePrecision {
     }
 
     public int fromDegreesWithTurns(float degrees) {
-        return Math.round(degrees * this.degreeToAngle);
+        return carpetfixes.helpers.FastMath.round(degrees * this.degreeToAngle); // Mirai
     }
 
     public int fromDegrees(float degrees) {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index c026597a3b6d902e4bb5966b693e3b91ecc4cd2b..f534924658186dfe91b132fc88439d797795fa29 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1617,7 +1617,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             if (this instanceof ServerPlayer) {
                 CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, source, f1, amount, flag);
                 if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f2 * 10.0F));
+                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Mirai
                 }
             }
 
@@ -2203,9 +2203,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
                 if (f3 > 0.0F && f3 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Mirai
                     } else if (source.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer) source.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) source.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Mirai
                     }
                 }
             }
@@ -2317,9 +2317,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 float f3 = (float) -event.getDamage(DamageModifier.RESISTANCE);
                 if (f3 > 0.0F && f3 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Mirai
                     } else if (damagesource.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Mirai
                     }
                 }
             }
@@ -2351,7 +2351,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             float f2 = absorptionModifier;
 
             if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof net.minecraft.world.entity.player.Player) {
-                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Mirai
             }
             if (f2 > 0.0F && f2 < 3.4028235E37F) {
                 Entity entity = damagesource.getEntity();
@@ -2359,7 +2359,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 if (entity instanceof ServerPlayer) {
                     ServerPlayer entityplayer = (ServerPlayer) entity;
 
-                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Mirai
                 }
             }
 
@@ -2382,7 +2382,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                     // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
                     ((net.minecraft.world.entity.player.Player) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
                     if (f < 3.4028235E37F) {
-                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, carpetfixes.helpers.FastMath.round(f * 10.0F)); // Mirai
                     }
                 }
                 // CraftBukkit end
@@ -2402,7 +2402,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                         CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, damagesource, originalDamage, f, true); // Paper - fix taken/dealt param order
                         f2 = (float) -event.getDamage(DamageModifier.BLOCKING);
                         if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, carpetfixes.helpers.FastMath.round(originalDamage * 10.0F)); // Mirai
                         }
                     }
 
@@ -3173,13 +3173,13 @@ public abstract class LivingEntity extends Entity implements Attackable {
         //this.level().getProfiler().push("rangeChecks"); // Purpur
 
         // Paper start - stop large pitch and yaw changes from crashing the server
-        this.yRotO += Math.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F;
+        this.yRotO += carpetfixes.helpers.FastMath.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F; // Mirai
 
-        this.yBodyRotO += Math.round((this.yBodyRot - this.yBodyRotO) / 360.0F) * 360.0F;
+        this.yBodyRotO += carpetfixes.helpers.FastMath.round((this.yBodyRot - this.yBodyRotO) / 360.0F) * 360.0F; // Mirai
 
-        this.xRotO += Math.round((this.getXRot() - this.xRotO) / 360.0F) * 360.0F;
+        this.xRotO += carpetfixes.helpers.FastMath.round((this.getXRot() - this.xRotO) / 360.0F) * 360.0F; // Mirai
 
-        this.yHeadRotO += Math.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F;
+        this.yHeadRotO += carpetfixes.helpers.FastMath.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F; // Mirai
         // Paper end
 
         //this.level().getProfiler().pop(); // Purpur
diff --git a/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java b/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java
index 2d78886b43aea59aeb1945767f992af462ea7844..70a2c4c745558c0750e6fc4db0e55a3964a9529c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java
+++ b/src/main/java/net/minecraft/world/entity/monster/breeze/LongJump.java
@@ -31,7 +31,7 @@ public class LongJump extends Behavior<Breeze> {
     private static final double MAX_LINE_OF_SIGHT_TEST_RANGE = 50.0D;
     private static final int JUMP_COOLDOWN_TICKS = 10;
     private static final int JUMP_COOLDOWN_WHEN_HURT_TICKS = 2;
-    private static final int INHALING_DURATION_TICKS = Math.round(10.0F);
+    private static final int INHALING_DURATION_TICKS = carpetfixes.helpers.FastMath.round(10.0F); // Mirai
     private static final float MAX_JUMP_VELOCITY = 1.4F;
     private static final ObjectArrayList<Integer> ALLOWED_ANGLES = new ObjectArrayList<>(Lists.newArrayList(40, 55, 60, 75, 80));
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java b/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java
index 0478df726d785128d593643dc07e0a9e5674b064..fcda83fa78b508ee1d439459c2de4d0e1c8d8887 100644
--- a/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java
+++ b/src/main/java/net/minecraft/world/entity/monster/breeze/Shoot.java
@@ -22,9 +22,9 @@ public class Shoot extends Behavior<Breeze> {
     private static final int UNCERTAINTY_BASE = 5;
     private static final int UNCERTAINTY_MULTIPLIER = 4;
     private static final float PROJECTILE_MOVEMENT_SCALE = 0.7F;
-    private static final int SHOOT_INITIAL_DELAY_TICKS = Math.round(15.0F);
-    private static final int SHOOT_RECOVER_DELAY_TICKS = Math.round(4.0F);
-    private static final int SHOOT_COOLDOWN_TICKS = Math.round(10.0F);
+    private static final int SHOOT_INITIAL_DELAY_TICKS = carpetfixes.helpers.FastMath.round(15.0F); // Mirai
+    private static final int SHOOT_RECOVER_DELAY_TICKS = carpetfixes.helpers.FastMath.round(4.0F); // Mirai
+    private static final int SHOOT_COOLDOWN_TICKS = carpetfixes.helpers.FastMath.round(10.0F); // Mirai
 
     @VisibleForTesting
     public Shoot() {
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 7fb3a6a48d4656181df9736f1e59062babb7fb5e..43032cda8dfbce0ab6c3c854ef1e4d8d411a77cc 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1112,7 +1112,7 @@ public abstract class Player extends LivingEntity {
             float f2 = f1 - f;
 
             if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+                this.awardStat(Stats.DAMAGE_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Mirai
             }
 
             if (f != 0.0F) {
@@ -1120,7 +1120,7 @@ public abstract class Player extends LivingEntity {
                 this.getCombatTracker().recordDamage(damagesource, f);
                 this.setHealth(this.getHealth() - f);
                 if (f < 3.4028235E37F) {
-                    this.awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                    this.awardStat(Stats.DAMAGE_TAKEN, carpetfixes.helpers.FastMath.round(f * 10.0F)); // Mirai
                 }
 
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
@@ -1461,7 +1461,7 @@ public abstract class Player extends LivingEntity {
                         if (target instanceof LivingEntity) {
                             float f5 = f3 - ((LivingEntity) target).getHealth();
 
-                            this.awardStat(Stats.DAMAGE_DEALT, Math.round(f5 * 10.0F));
+                            this.awardStat(Stats.DAMAGE_DEALT, carpetfixes.helpers.FastMath.round(f5 * 10.0F)); // Mirai
                             if (j > 0) {
                                 // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
                                 EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), target.getBukkitEntity(), j * 4);
@@ -1725,7 +1725,7 @@ public abstract class Player extends LivingEntity {
             return false;
         } else {
             if (fallDistance >= 2.0F) {
-                this.awardStat(Stats.FALL_ONE_CM, (int) Math.round((double) fallDistance * 100.0D));
+                this.awardStat(Stats.FALL_ONE_CM, (int) carpetfixes.helpers.FastMath.round((double) fallDistance * 100.0D)); // Mirai
             }
 
             return super.causeFallDamage(fallDistance, damageMultiplier, damageSource);
@@ -1943,7 +1943,7 @@ public abstract class Player extends LivingEntity {
             // Purpur start
             int toDrop;
             try {
-                toDrop = Math.round(((Number) scriptEngine.eval("let expLevel = " + experienceLevel + "; " +
+                toDrop = carpetfixes.helpers.FastMath.round(((Number) scriptEngine.eval("let expLevel = " + experienceLevel + "; " + // Mirai
                         "let expTotal = " + totalExperience + "; " +
                         "let exp = " + experienceProgress + "; " +
                         level().purpurConfig.playerDeathExpDropEquation)).floatValue());
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 9daf8a85ed3f429bfb287d099be23bca847a7671..022d394c1879c3bfa25c9f3a106f19884bd14223 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -307,7 +307,7 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     protected static float lerpRotation(float prevRot, float newRot) {
-        prevRot += Math.round((newRot - prevRot) / 360.0F) * 360.0F; // Paper - stop large look changes from crashing the server
+        prevRot += carpetfixes.helpers.FastMath.round((newRot - prevRot) / 360.0F) * 360.0F; // Paper - stop large look changes from crashing the server // Mirai
 
         return Mth.lerp(0.2F, prevRot, newRot);
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index c072e3e9742f733aad0d13833fb700c42ca1c356..db9a015029be056fa15c80f5619f0bd5add74e8e 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -169,7 +169,7 @@ public class Item implements FeatureElement, ItemLike {
     }
 
     public int getBarWidth(ItemStack stack) {
-        return Math.round(13.0F - (float)stack.getDamageValue() * 13.0F / (float)this.maxDamage);
+        return carpetfixes.helpers.FastMath.round(13.0F - (float)stack.getDamageValue() * 13.0F / (float)this.maxDamage); // Mirai
     }
 
     public int getBarColor(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index 1eec84e217f6dc929091fa7451cd235ef3623822..a9a3a364c98dede955c147abe722a88c3827ce21 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -373,7 +373,7 @@ public class EnchantmentHelper {
         } else {
             level += 1 + random.nextInt(i / 4 + 1) + random.nextInt(i / 4 + 1);
             float f = (random.nextFloat() + random.nextFloat() - 1.0F) * 0.15F;
-            level = Mth.clamp(Math.round((float)level + (float)level * f), 1, Integer.MAX_VALUE);
+            level = Mth.clamp(carpetfixes.helpers.FastMath.round((float)level + (float)level * f), 1, Integer.MAX_VALUE); // Mirai
             List<EnchantmentInstance> list2 = getAvailableEnchantmentResults(level, stack, treasureAllowed);
             if (!list2.isEmpty()) {
                 WeightedRandom.getRandomItem(random, list2).ifPresent(list::add);
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index de6f00d03223939386aa2ccfdec1e696a68313d7..c91eebd46b1e370d8e85dce63681b94129a2942c 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -69,7 +69,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
             float f1 = f < 3.1415927F ? 0.0F : 6.2831855F;
 
             f += (f1 - f) * 0.2F;
-            i = Math.round((float) i * Mth.cos(f));
+            i = carpetfixes.helpers.FastMath.round((float) i * Mth.cos(f)); // Mirai
         }
 
         i = Mth.clamp(i, 0, 15);
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
index 5d3d9164a05efbecc59ace6175f449f34d8d3ccd..9e2fbdf99162d100fb322a1ebe0bd6fc7ae3c09f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -239,8 +239,8 @@ public class ChunkGeneratorStructureState {
 
             for (int j1 = 0; j1 < j; ++j1) {
                 double d1 = (double) (4 * i + i * i1 * 6) + (randomsource.nextDouble() - 0.5D) * (double) i * 2.5D;
-                int k1 = (int) Math.round(Math.cos(d0) * d1);
-                int l1 = (int) Math.round(Math.sin(d0) * d1);
+                int k1 = (int) carpetfixes.helpers.FastMath.round(Math.cos(d0) * d1);  // Mirai
+                int l1 = (int) carpetfixes.helpers.FastMath.round(Math.sin(d0) * d1);  // Mirai
                 RandomSource randomsource1 = randomsource.fork();
 
                 list.add(CompletableFuture.supplyAsync(() -> {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
index f451d993bd71e14ab086ed726394007ede68de78..e19386b4cb7845f165353e97741eca4677dad7b8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
@@ -300,7 +300,7 @@ public class SurfaceSystem {
     }
 
     protected BlockState getBand(int x, int y, int z) {
-        int i = (int)Math.round(this.clayBandsOffsetNoise.getValue((double)x, 0.0D, (double)z) * 4.0D);
+        int i = (int)carpetfixes.helpers.FastMath.round(this.clayBandsOffsetNoise.getValue((double)x, 0.0D, (double)z) * 4.0D); // Mirai
         return this.clayBands[(y + i + this.clayBands.length) % this.clayBands.length];
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
index b07e0be0ced2fb5f1651dfae7a2477974ea3b32e..d8e6240cfae2dab56cb9119d2ed87bb4beacb0a9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
@@ -46,6 +46,6 @@ public class ScatteredOreFeature extends Feature<OreConfiguration> {
     }
 
     private int getRandomPlacementInOneAxisRelativeToOrigin(RandomSource random, int spread) {
-        return Math.round((random.nextFloat() - random.nextFloat()) * (float)spread);
+        return carpetfixes.helpers.FastMath.round((random.nextFloat() - random.nextFloat()) * (float)spread); // Mirai
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
index e5177e5ffcac360f935f2139db4554c6586b551e..22e8e1c5a45c10aad6d54e262cc9072c97516e2b 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -76,7 +76,7 @@ public class LootingEnchantFunction extends LootItemConditionalFunction {
 
             float f = (float) i * this.value.getFloat(context);
 
-            stack.grow(Math.round(f));
+            stack.grow(carpetfixes.helpers.FastMath.round(f)); // Mirai
             if (this.hasLimit() && stack.getCount() > this.limit) {
                 stack.setCount(this.limit);
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
index 2a7c75ea447b179ea1ab9db56e8a39d03faa0bce..53ca87c7659a4fff9e99d21217d1ad08c8765836 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
@@ -7,7 +7,7 @@ public interface NumberProvider extends LootContextUser {
     float getFloat(LootContext context);
 
     default int getInt(LootContext context) {
-        return Math.round(this.getFloat(context));
+        return carpetfixes.helpers.FastMath.round(this.getFloat(context)); // Mirai
     }
 
     LootNumberProviderType getType();
diff --git a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
index 17785f7c709073a01928e8e6a57702f8357900f4..795f158fe83bff449a159010f3975317d39e2ea7 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
@@ -85,8 +85,8 @@ public final class Shapes {
                     final int sizeZ = 1 << bitsZ;
                     final BitSetDiscreteVoxelShape shape = BitSetDiscreteVoxelShape.withFilledBounds(
                             sizeX, sizeY, sizeZ,
-                            (int)Math.round(minX * (double)sizeX), (int)Math.round(minY * (double)sizeY), (int)Math.round(minZ * (double)sizeZ),
-                            (int)Math.round(maxX * (double)sizeX), (int)Math.round(maxY * (double)sizeY), (int)Math.round(maxZ * (double)sizeZ)
+                            (int)carpetfixes.helpers.FastMath.round(minX * (double)sizeX), (int)carpetfixes.helpers.FastMath.round(minY * (double)sizeY), (int)carpetfixes.helpers.FastMath.round(minZ * (double)sizeZ), // Mirai
+                            (int)carpetfixes.helpers.FastMath.round(maxX * (double)sizeX), (int)carpetfixes.helpers.FastMath.round(maxY * (double)sizeY), (int)carpetfixes.helpers.FastMath.round(maxZ * (double)sizeZ) // Mirai
                     );
                     return new ArrayVoxelShape(
                             shape,
@@ -120,8 +120,8 @@ public final class Shapes {
                 int j = 1 << i;
                 double d = min * (double)j;
                 double e = max * (double)j;
-                boolean bl = Math.abs(d - (double)Math.round(d)) < 1.0E-7D * (double)j;
-                boolean bl2 = Math.abs(e - (double)Math.round(e)) < 1.0E-7D * (double)j;
+                boolean bl = Math.abs(d - (double)carpetfixes.helpers.FastMath.round(d)) < 1.0E-7D * (double)j; // Mirai
+                boolean bl2 = Math.abs(e - (double)carpetfixes.helpers.FastMath.round(e)) < 1.0E-7D * (double)j; // Mirai
                 if (bl && bl2) {
                     return i;
                 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index c3ee916f1a34471b5c13d80a00ed43572ef97d21..07a54df30f0ec9381675d6c940a16becf7604e00 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -70,7 +70,7 @@ public class TicksPerSecondCommand extends Command
     {
         // Paper
         net.kyori.adventure.text.format.TextColor color = ( ( tps > 18.0 ) ? net.kyori.adventure.text.format.NamedTextColor.GREEN : ( tps > 16.0 ) ? net.kyori.adventure.text.format.NamedTextColor.YELLOW : net.kyori.adventure.text.format.NamedTextColor.RED );
-        String amount = Math.min(Math.round(tps * 100.0) / 100.0, 20.0) + (tps > 21.0  ? "*" : ""); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        String amount = Math.min(carpetfixes.helpers.FastMath.round(tps * 100.0) / 100.0, 20.0) + (tps > 21.0  ? "*" : ""); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
         return net.kyori.adventure.text.Component.text(amount, color);
         // Paper end
     }
