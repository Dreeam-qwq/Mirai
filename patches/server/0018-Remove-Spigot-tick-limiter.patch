From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Simon Gardling <titaniumtown@gmail.com>
Date: Mon, 6 Dec 2021 10:34:33 -0500
Subject: [PATCH] Remove Spigot tick limiter

Original code by Titaniumtown, licensed under GPL v3
You can find the original code on https://gitlab.com/Titaniumtown/JettPack

diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 63cd7cc48ba5a76f2939c81d1daa37124ef7569f..4e91f47f43b57a15cf6e9fb968d27b352a2e43f4 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -179,8 +179,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
-    private org.spigotmc.TickLimiter entityLimiter;
-    private org.spigotmc.TickLimiter tileLimiter;
+    //private org.spigotmc.TickLimiter entityLimiter; // JettPack - remove tick limiter
+    //private org.spigotmc.TickLimiter tileLimiter; // JettPack - remove tick limiter
     private int tileTickPosition;
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
     public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Move from Map in BlockRedstoneTorch to here
@@ -342,8 +342,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         // CraftBukkit end
         this.timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
         this.keepSpawnInMemory = this.paperConfig().spawn.keepSpawnLoaded; // Paper
-        this.entityLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.entityMaxTickTime);
-        this.tileLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.tileMaxTickTime);
+        //this.entityLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.entityMaxTickTime); // JettPack - remove tick limiter
+        //this.tileLimiter = new org.spigotmc.TickLimiter(this.spigotConfig.tileMaxTickTime); // JettPack - remove tick limiter
         this.chunkPacketBlockController = this.paperConfig().anticheat.antiXray.enabled ? new com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray(this, executor) : com.destroystokyo.paper.antixray.ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         // Paper start - optimise collisions
         this.minSection = io.papermc.paper.util.WorldUtil.getMinSection(this);
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index f9b8e2bc039f1a37e47f84909c8785f3ef530284..2ded20d45cd7909ededa9de7b4ddaa8a39f032c9 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -450,6 +450,7 @@ public class SpigotWorldConfig
         this.hangingTickFrequency = this.getInt( "hanging-tick-frequency", 100 );
     }
 
+    /* JettPack - remove tick limiter
     public int tileMaxTickTime;
     public int entityMaxTickTime;
     private void maxTickTimes()
@@ -458,6 +459,7 @@ public class SpigotWorldConfig
         this.entityMaxTickTime = this.getInt("max-tick-time.entity", 50);
         this.log("Tile Max Tick Time: " + this.tileMaxTickTime + "ms Entity max Tick Time: " + this.entityMaxTickTime + "ms");
     }
+    */
 
     public int thunderChance;
     private void thunderChance()
diff --git a/src/main/java/org/spigotmc/TickLimiter.java b/src/main/java/org/spigotmc/TickLimiter.java
deleted file mode 100644
index 4074538ea6090bf99d8ab04b1e98c2832a0e9a98..0000000000000000000000000000000000000000
--- a/src/main/java/org/spigotmc/TickLimiter.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.spigotmc;
-
-public class TickLimiter {
-
-    private final int maxTime;
-    private long startTime;
-
-    public TickLimiter(int maxtime) {
-        this.maxTime = maxtime;
-    }
-
-    public void initTick() {
-        this.startTime = System.currentTimeMillis();
-    }
-
-    public boolean shouldContinue() {
-        long remaining = System.currentTimeMillis() - this.startTime;
-        return remaining < this.maxTime;
-    }
-}
